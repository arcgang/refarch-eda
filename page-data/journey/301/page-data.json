{"componentChunkName":"component---src-pages-journey-301-index-mdx","path":"/journey/301/","result":{"pageContext":{"frontmatter":{"title":"Learning Journey - Be an expert (301 content)","description":"Learning more about Event Streams and Event Driven Solution"},"relativePagePath":"/journey/301/index.mdx","titleType":"append","MdxNode":{"id":"696ec473-546d-58ea-a7cd-d8aeeaabf218","children":[],"parent":"3de6b094-7ce4-57c9-b48c-b9c87ba13753","internal":{"content":"---\ntitle: Learning Journey - Be an expert (301 content)\ndescription: Learning more about Event Streams and Event Driven Solution\n---\n\nIn this article we are presenting more advanced concepts and guidances for developer\nand operation teams.\n\n<AnchorLinks>\n  <AnchorLink>Security review - RBAC</AnchorLink>\n  <AnchorLink>Producer advanced</AnchorLink>\n  <AnchorLink>Consumer Advanced</AnchorLink>\n  <AnchorLink>Anatomy of an event-driven microservice</AnchorLink>\n  <AnchorLink>Adoption Domain Driven Design</AnchorLink>\n  <AnchorLink>Reactive system</AnchorLink>\n  <AnchorLink>Quarkus Reactive Messaging</AnchorLink>\n  <AnchorLink>Doing data processing with Flink</AnchorLink>\n  <AnchorLink>Learn more abour schema registry</AnchorLink>\n  <AnchorLink>Always-On</AnchorLink>\n  <AnchorLink>Monitoring</AnchorLink>\n  <AnchorLink>Governance</AnchorLink>\n  <AnchorLink>Deployment with GitOps practices</AnchorLink>\n</AnchorLinks>\n\n## Security review - RBAC\n## Producer advanced\n\nIn [this section](/technology/kafka-producers/#advanced-producer-discussion), we address how to support exactly once delivery\nbetween producer and consumer, discuss about idempotence and avoid getting duplicate messages from the producer. \n\n## Consumer Advanced \n\nConsumers are not that easy to implement well when we need to address idempotence and exactly once delivery. \nWe are covering more about advance concepts for consumer in [the offset management section](/technology/kafka-consumers/#offset-management). \n\n## Anatomy of an event-driven microservice\n\n## Adoption Domain Driven Design\n\n## Reactive system\n\nWe have introduction and overview of why Reactive Manifesto is important and the supporting technologies, in [this article](/advantages/reactive/).\n\n## Quarkus Reactive Messaging\n## Doing data processing with Flink \n## Learn more abour schema registry\n## Always-On\n## Monitoring\n## Governance \n\n## Deployment with GitOps practices\n\n## Deploying a Kafka Connect Confluent MQ connector with SSL security to MQ\n\nHere there is the `eda-lab-mq-to-kafka` [repository](https://github.com/ibm-cloud-architecture/eda-lab-mq-to-kafka) which goes into all the configuration and steps that need to be \ndone to connect Kafka Connect to MQ on the Confluent platform.\n","type":"Mdx","contentDigest":"a049ffff0b7724579086a22ad081922e","owner":"gatsby-plugin-mdx","counter":910},"frontmatter":{"title":"Learning Journey - Be an expert (301 content)","description":"Learning more about Event Streams and Event Driven Solution"},"exports":{},"rawBody":"---\ntitle: Learning Journey - Be an expert (301 content)\ndescription: Learning more about Event Streams and Event Driven Solution\n---\n\nIn this article we are presenting more advanced concepts and guidances for developer\nand operation teams.\n\n<AnchorLinks>\n  <AnchorLink>Security review - RBAC</AnchorLink>\n  <AnchorLink>Producer advanced</AnchorLink>\n  <AnchorLink>Consumer Advanced</AnchorLink>\n  <AnchorLink>Anatomy of an event-driven microservice</AnchorLink>\n  <AnchorLink>Adoption Domain Driven Design</AnchorLink>\n  <AnchorLink>Reactive system</AnchorLink>\n  <AnchorLink>Quarkus Reactive Messaging</AnchorLink>\n  <AnchorLink>Doing data processing with Flink</AnchorLink>\n  <AnchorLink>Learn more abour schema registry</AnchorLink>\n  <AnchorLink>Always-On</AnchorLink>\n  <AnchorLink>Monitoring</AnchorLink>\n  <AnchorLink>Governance</AnchorLink>\n  <AnchorLink>Deployment with GitOps practices</AnchorLink>\n</AnchorLinks>\n\n## Security review - RBAC\n## Producer advanced\n\nIn [this section](/technology/kafka-producers/#advanced-producer-discussion), we address how to support exactly once delivery\nbetween producer and consumer, discuss about idempotence and avoid getting duplicate messages from the producer. \n\n## Consumer Advanced \n\nConsumers are not that easy to implement well when we need to address idempotence and exactly once delivery. \nWe are covering more about advance concepts for consumer in [the offset management section](/technology/kafka-consumers/#offset-management). \n\n## Anatomy of an event-driven microservice\n\n## Adoption Domain Driven Design\n\n## Reactive system\n\nWe have introduction and overview of why Reactive Manifesto is important and the supporting technologies, in [this article](/advantages/reactive/).\n\n## Quarkus Reactive Messaging\n## Doing data processing with Flink \n## Learn more abour schema registry\n## Always-On\n## Monitoring\n## Governance \n\n## Deployment with GitOps practices\n\n## Deploying a Kafka Connect Confluent MQ connector with SSL security to MQ\n\nHere there is the `eda-lab-mq-to-kafka` [repository](https://github.com/ibm-cloud-architecture/eda-lab-mq-to-kafka) which goes into all the configuration and steps that need to be \ndone to connect Kafka Connect to MQ on the Confluent platform.\n","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/journey/301/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}