{"componentChunkName":"component---src-pages-scenarios-realtime-inventory-index-older-mdx","path":"/scenarios/realtime-inventory/index-older/","result":{"pageContext":{"frontmatter":{"description":"Scenarios / Realtime Inventory / Index Older","title":"Scenarios / Realtime Inventory / Index Older"},"relativePagePath":"/scenarios/realtime-inventory/index-older.mdx","titleType":"append","MdxNode":{"id":"f754bab4-73f6-541a-a2a2-8526cc93e90f","children":[],"parent":"cd7a5327-6435-5bd7-ba67-7341884b2e7c","internal":{"content":"\n\n  \n1. Send some events by selecting the toggle Kafka and then the number of records to send:\n\n  ![](./images/run-simulation.png)\n\n  once started a table should be displayed to present the records sent to Kafka. \n\n1. Let assess if we can see the item stock cross stores: use the item-aggregator route, something like ` item-aggregator-rt-inventory.dte-ocp46-73awfj-915b3b336cabec458a7c7ec2aa7c625f-0000.us-east.containers.appdomain.cloud ` but completed with '/q/swagger-ui' as we want to access the API\n  \n  To get this route use the following command:\n\n  ```sh\n  oc get routes item-aggregator -o jsonpath=\"{.spec.host}\" && echo\n  ```\n\n   Select the get `/api/v1/items/{itemID}` operation:\n\n  ![](./images/items-stock-req.png)\n\n  Use one of the following item id: [Item_1, Item_2, Item_3, Item_4, Item_5, Item_6, Item_7]. You should get \n  the current stock cross stores\n\n  ![](./images/item-stock-response.png)\n\n1. Let assess a store stock, for that we access the store aggregator URL: `store-aggregator-rt-inventory.dte-ocp46-73awfj-915b3b336cabec458a7c7ec2aa7c625f-0000.us-east.containers.appdomain.cloud ` with the `/q/swagger-ui` suffix.\n\n  To get this route use the following command:\n\n  ```sh\n  oc get routes store-aggregator -o jsonpath=\"{.spec.host}\" && echo\n  ```\n\n  Then use the GET on the `api/v1/stores/inventory/{storeID}`, and enter one of the available store: `[Store_1, Store_2, Store_3, Store_4, Store_5]`\n\n  ![](./images/store-stock-req.png)\n\n  The response should look like:\n\n  ![](./images/store-stock-response.png)\n\n\n\n\n","type":"Mdx","contentDigest":"57e7df992c1604b01b4ec594b67663a4","owner":"gatsby-plugin-mdx","counter":921},"frontmatter":{"description":"Scenarios / Realtime Inventory / Index Older","title":"Scenarios / Realtime Inventory / Index Older"},"exports":{},"rawBody":"\n\n  \n1. Send some events by selecting the toggle Kafka and then the number of records to send:\n\n  ![](./images/run-simulation.png)\n\n  once started a table should be displayed to present the records sent to Kafka. \n\n1. Let assess if we can see the item stock cross stores: use the item-aggregator route, something like ` item-aggregator-rt-inventory.dte-ocp46-73awfj-915b3b336cabec458a7c7ec2aa7c625f-0000.us-east.containers.appdomain.cloud ` but completed with '/q/swagger-ui' as we want to access the API\n  \n  To get this route use the following command:\n\n  ```sh\n  oc get routes item-aggregator -o jsonpath=\"{.spec.host}\" && echo\n  ```\n\n   Select the get `/api/v1/items/{itemID}` operation:\n\n  ![](./images/items-stock-req.png)\n\n  Use one of the following item id: [Item_1, Item_2, Item_3, Item_4, Item_5, Item_6, Item_7]. You should get \n  the current stock cross stores\n\n  ![](./images/item-stock-response.png)\n\n1. Let assess a store stock, for that we access the store aggregator URL: `store-aggregator-rt-inventory.dte-ocp46-73awfj-915b3b336cabec458a7c7ec2aa7c625f-0000.us-east.containers.appdomain.cloud ` with the `/q/swagger-ui` suffix.\n\n  To get this route use the following command:\n\n  ```sh\n  oc get routes store-aggregator -o jsonpath=\"{.spec.host}\" && echo\n  ```\n\n  Then use the GET on the `api/v1/stores/inventory/{storeID}`, and enter one of the available store: `[Store_1, Store_2, Store_3, Store_4, Store_5]`\n\n  ![](./images/store-stock-req.png)\n\n  The response should look like:\n\n  ![](./images/store-stock-response.png)\n\n\n\n\n","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/scenarios/realtime-inventory/index-older.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}