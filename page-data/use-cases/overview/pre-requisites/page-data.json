{"componentChunkName":"component---src-pages-use-cases-overview-pre-requisites-mdx","path":"/use-cases/overview/pre-requisites/","result":{"pageContext":{"frontmatter":{"title":"Common pre-requisites","description":"Common pre-requisites for the different labs and use cases"},"relativePagePath":"/use-cases/overview/pre-requisites.mdx","titleType":"append","MdxNode":{"id":"0c32a2cc-672f-585a-bee3-10df722db658","children":[],"parent":"ba8759b6-67e9-59e6-8559-1263014dc089","internal":{"content":"---\ntitle: Common pre-requisites\ndescription: Common pre-requisites for the different labs and use cases\n---\n\n<AnchorLinks>\n  <AnchorLink>IBM Cloud Shell</AnchorLink>\n  <AnchorLink>Run the Starter Application</AnchorLink>\n  <AnchorLink>Using Kafdrop</AnchorLink>\n  <AnchorLink>Running docker in kubernetes pod</AnchorLink>\n</AnchorLinks>\n\n## IBM Cloud Shell\n\nHere we are going to set up our IBM Cloud Shell with all the tools required to carry out this lab.\n\nStart your IBM Cloud Shell by pointing your browser to <https://cloud.ibm.com/shell>\n\n![shell](./images/shell-v10.png)\n\n#### IBM Cloud Pak CLI\n\nCloudctl is a command line tool to manage Container Application Software for Enterprises (CASEs). This CLI will allow us to manage Cloud Pak related components as well as software, like IBM Event Streams, installed through any IBM Cloud Pak.\n\nIn order to install it, execute the following commands in your IBM Cloud Shell:\n\n1. Download the IBM Cloud Pak CLI - `curl -L https://github.com/IBM/cloud-pak-cli/releases/latest/download/cloudctl-linux-amd64.tar.gz -o cloudctl-linux-amd64.tar.gz`\n1. Untar it - `tar -xvf cloudctl-linux-amd64.tar.gz`\n1. Rename it for ease of use - `mv cloudctl-linux-amd64 cloudctl`\n1. Include it to the PATH environment variable - `export PATH=$PATH:$PWD`\n1. Make sure your IBM Cloud Pak CLI is in the path- `which cloudctl`\n1. Make sure your IBM Cloud Pak CLI works - `cloudctl help`\n\n![shell2](./images/shell2-v10.png)\n\n#### Event Streams plugin for IBM Cloud Pak CLI\n\nThis plugin will allow us to manage IBM Event Streams.\n\nIn order to install it, execute the following commands in your IBM Cloud Shell:\n\n1. Download the Event Streams plugin for IBM Cloud Pak CLI - `curl -L http://ibm.biz/es-cli-linux -o es-plugin`\n1. Install it - `cloudctl plugin install es-plugin`\n1. Make sure it works - `cloudctl es help`\n\n![shell3](./images/shell3-v10.png)\n\n#### Git\n\nIBM Cloud Shell comes with Git already installed out of the box.\n\n#### Vi\n\nIBM Cloud Shell comes with Vi already installed out of the box.\n\n#### Python 3\n\nIBM Cloud Shell comes with Python 3 already installed out of the box. However, we need to install the following modules that will be used later on in this tutorial when we run a Python application to work with Avro, Schemas and messages. These modules are `confluent_kafka` and `avro-python3`\n\nIn order to install these modules, execute the following command in your IBM Cloud Shell:\n\n1. Install the modules - `python3 -mpip install avro-python3 confluent_kafka`\n\n![shell4](./images/shell4-v10.png)\n\n**Congrats!** you have now your IBM Cloud Shell ready to start working.\n\n\n## Run the Starter Application\n\nThis section details walking through the generation of a starter application for usage with IBM Event Streams, as documented in the [official product documentation](https://ibm.github.io/event-streams/getting-started/generating-starter-app/).\n\n1. Log into the IBM Event Streams Dashboard.\n\n  ![Monitoring1](./images/monitoring1.png)\n\n1. Click the **Try the starter application** button from the _Getting Started_ page\n\n  ![Monitoring2](./images/monitoring2.png)\n\n1. Click **Download JAR from GitHub**. This will open a new window to <https://github.com/ibm-messaging/kafka-java-vertx-starter/releases>\n  \n  ![Monitoring3](./images/monitoring3.png)\n\n   - Click the link for `demo-all.jar` from the latest release available. At the time of this writing, the latest version was `1.0.0`.\n  \n   ![Monitoring4](./images/monitoring4.png)\n\n1. Return to the `Configure & run starter application` window and click **Generate properties**.\n\n  ![Monitoring5](./images/monitoring5.png)\n\n1. In dialog that pops up from the right-hand side of the screen, enter the following information:\n   - **Starter application name:** `monitoring-lab-[your-initials]`\n   - Leave **New topic** selected and enter a **Topic name** of `monitoring-lab-topic-[your-initials]`.\n   - Click **Generate and download .zip**\n  \n   ![Monitoring6](./images/monitoring6.png)\n\n1. In a Terminal window, unzip the generated ZIP file from the previous window and move `demo-all.jar` file into the same folder.\n\n1. Review the extracted `kafka.properties` to understand how Event Streams has generated credentials and configuration information for this sample application to connect.\n\n1. Run the command `java -Dproperties_path=./kafka.properties -jar demo-all.jar`.\n\n1.  Wait until you see the string `Application started in X ms` in the output and then visit the application's user interface via `http://localhost:8080`.\n\n  ![Monitoring7](./images/monitoring7.png)\n\n1. Once in the User Interface, enter a message to be contained for the Kafka record value then click **Start producing**.\n\n1. Wait a few moments until the UI updates to show some of the confirmed produced messages and offsets, then click on **Start consuming** on the right side of the application.\n\n  ![Monitoring8](./images/monitoring8.png)\n\n1. In the IBM Event Streams user interface, go to the topic where you send the messages to and make sure messages have actually made it.\n\n  ![Monitoring9](./images/monitoring9.png)\n\n1. You can do the following actions on the application\n   - If you would like to stop the application from producing, you can click **Stop producing**.\n   - If you would like to stop the application from consuming, you can click **Stop consuming**.\n   - If you would like to stop the application entirely, you can input `Control+C` in the Terminal session where the application is running.\n\nAn [alternative sample application](https://ibm.github.io/event-streams/getting-started/testing-loads/) can be leveraged from the official documentation to generate higher amounts of load.\n\n## Using Kafdrop\n\n[Kafdrop](https://github.com/obsidiandynamics/kafdrop) is a web UI for viewing Kafka topics and browsing consumer groups. It is very helpful for development purpose. \n\nHere are scripts that can be useful to start a local Kafdrop webserver.\n\n```shell\nsource .env\nsed 's/KAFKA_USER/'$KAFKA_USER'/g' ./scripts/kafka.properties > ./scripts/output.properties\nsed -i '' 's/KAFKA_PASSWORD/'$KAFKA_PASSWORD'/g' ./scripts/output.properties\nsed -i '' 's/KAFKA_CERT_PWD/'$KAFKA_CERT_PWD'/g' ./scripts/output.properties\ndocker run -d --rm -p 9000:9000 \\\n    --name kafdrop \\\n    -v $(pwd)/certs:/home/certs \\\n    -e KAFKA_BROKERCONNECT=$KAFKA_BROKERS \\\n    -e KAFKA_PROPERTIES=$(cat ./scripts/output.properties | base64) \\\n    -e JVM_OPTS=\"-Xms32M -Xmx64M\" \\\n    -e SERVER_SERVLET_CONTEXTPATH=\"/\" \\\n    obsidiandynamics/kafdrop\n```\n\n[See also those scripts: startKafdrop](https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-eda-item-inventory/master/scripts/startKafdrop.sh)\n\nand [to stop kafdrop](https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-eda-item-inventory/master/scripts/stopKafdrop.sh)\n\n```shell\ndocker stop $(docker stop kafdrop)\n```\n\nThe Web console is at [http://localhost:9000/](http://localhost:9000/)\n\n## Running docker in kubernetes pod\n\nIf you need to run some of the lab within a shell session with docker, you can create a pod, using OpenShift console under one of your project:\n\n ![1](./images/create-pod.png)\n\nIn the yaml editor, copy [this yaml file](https://gist.githubusercontent.com/osowski/4c9b6eb8e63b93e97ad6fecd8d9c8ff4/raw/8c2720c572458838942ccdba87271c61d4764671/dind.yaml). This operation will download the docker image from dockerhub ibmcase account.\n\nYou can also download the yaml and do an `oc apply -f dind.yaml`.\n\nThen remote exec a shell within the pod: `oc exec -it dind bash`. You should be able to run another docker image in this pod, like for example our python environment.\n","type":"Mdx","contentDigest":"d71d430966de40748c3dd0c9ad4db85e","owner":"gatsby-plugin-mdx","counter":964},"frontmatter":{"title":"Common pre-requisites","description":"Common pre-requisites for the different labs and use cases"},"exports":{},"rawBody":"---\ntitle: Common pre-requisites\ndescription: Common pre-requisites for the different labs and use cases\n---\n\n<AnchorLinks>\n  <AnchorLink>IBM Cloud Shell</AnchorLink>\n  <AnchorLink>Run the Starter Application</AnchorLink>\n  <AnchorLink>Using Kafdrop</AnchorLink>\n  <AnchorLink>Running docker in kubernetes pod</AnchorLink>\n</AnchorLinks>\n\n## IBM Cloud Shell\n\nHere we are going to set up our IBM Cloud Shell with all the tools required to carry out this lab.\n\nStart your IBM Cloud Shell by pointing your browser to <https://cloud.ibm.com/shell>\n\n![shell](./images/shell-v10.png)\n\n#### IBM Cloud Pak CLI\n\nCloudctl is a command line tool to manage Container Application Software for Enterprises (CASEs). This CLI will allow us to manage Cloud Pak related components as well as software, like IBM Event Streams, installed through any IBM Cloud Pak.\n\nIn order to install it, execute the following commands in your IBM Cloud Shell:\n\n1. Download the IBM Cloud Pak CLI - `curl -L https://github.com/IBM/cloud-pak-cli/releases/latest/download/cloudctl-linux-amd64.tar.gz -o cloudctl-linux-amd64.tar.gz`\n1. Untar it - `tar -xvf cloudctl-linux-amd64.tar.gz`\n1. Rename it for ease of use - `mv cloudctl-linux-amd64 cloudctl`\n1. Include it to the PATH environment variable - `export PATH=$PATH:$PWD`\n1. Make sure your IBM Cloud Pak CLI is in the path- `which cloudctl`\n1. Make sure your IBM Cloud Pak CLI works - `cloudctl help`\n\n![shell2](./images/shell2-v10.png)\n\n#### Event Streams plugin for IBM Cloud Pak CLI\n\nThis plugin will allow us to manage IBM Event Streams.\n\nIn order to install it, execute the following commands in your IBM Cloud Shell:\n\n1. Download the Event Streams plugin for IBM Cloud Pak CLI - `curl -L http://ibm.biz/es-cli-linux -o es-plugin`\n1. Install it - `cloudctl plugin install es-plugin`\n1. Make sure it works - `cloudctl es help`\n\n![shell3](./images/shell3-v10.png)\n\n#### Git\n\nIBM Cloud Shell comes with Git already installed out of the box.\n\n#### Vi\n\nIBM Cloud Shell comes with Vi already installed out of the box.\n\n#### Python 3\n\nIBM Cloud Shell comes with Python 3 already installed out of the box. However, we need to install the following modules that will be used later on in this tutorial when we run a Python application to work with Avro, Schemas and messages. These modules are `confluent_kafka` and `avro-python3`\n\nIn order to install these modules, execute the following command in your IBM Cloud Shell:\n\n1. Install the modules - `python3 -mpip install avro-python3 confluent_kafka`\n\n![shell4](./images/shell4-v10.png)\n\n**Congrats!** you have now your IBM Cloud Shell ready to start working.\n\n\n## Run the Starter Application\n\nThis section details walking through the generation of a starter application for usage with IBM Event Streams, as documented in the [official product documentation](https://ibm.github.io/event-streams/getting-started/generating-starter-app/).\n\n1. Log into the IBM Event Streams Dashboard.\n\n  ![Monitoring1](./images/monitoring1.png)\n\n1. Click the **Try the starter application** button from the _Getting Started_ page\n\n  ![Monitoring2](./images/monitoring2.png)\n\n1. Click **Download JAR from GitHub**. This will open a new window to <https://github.com/ibm-messaging/kafka-java-vertx-starter/releases>\n  \n  ![Monitoring3](./images/monitoring3.png)\n\n   - Click the link for `demo-all.jar` from the latest release available. At the time of this writing, the latest version was `1.0.0`.\n  \n   ![Monitoring4](./images/monitoring4.png)\n\n1. Return to the `Configure & run starter application` window and click **Generate properties**.\n\n  ![Monitoring5](./images/monitoring5.png)\n\n1. In dialog that pops up from the right-hand side of the screen, enter the following information:\n   - **Starter application name:** `monitoring-lab-[your-initials]`\n   - Leave **New topic** selected and enter a **Topic name** of `monitoring-lab-topic-[your-initials]`.\n   - Click **Generate and download .zip**\n  \n   ![Monitoring6](./images/monitoring6.png)\n\n1. In a Terminal window, unzip the generated ZIP file from the previous window and move `demo-all.jar` file into the same folder.\n\n1. Review the extracted `kafka.properties` to understand how Event Streams has generated credentials and configuration information for this sample application to connect.\n\n1. Run the command `java -Dproperties_path=./kafka.properties -jar demo-all.jar`.\n\n1.  Wait until you see the string `Application started in X ms` in the output and then visit the application's user interface via `http://localhost:8080`.\n\n  ![Monitoring7](./images/monitoring7.png)\n\n1. Once in the User Interface, enter a message to be contained for the Kafka record value then click **Start producing**.\n\n1. Wait a few moments until the UI updates to show some of the confirmed produced messages and offsets, then click on **Start consuming** on the right side of the application.\n\n  ![Monitoring8](./images/monitoring8.png)\n\n1. In the IBM Event Streams user interface, go to the topic where you send the messages to and make sure messages have actually made it.\n\n  ![Monitoring9](./images/monitoring9.png)\n\n1. You can do the following actions on the application\n   - If you would like to stop the application from producing, you can click **Stop producing**.\n   - If you would like to stop the application from consuming, you can click **Stop consuming**.\n   - If you would like to stop the application entirely, you can input `Control+C` in the Terminal session where the application is running.\n\nAn [alternative sample application](https://ibm.github.io/event-streams/getting-started/testing-loads/) can be leveraged from the official documentation to generate higher amounts of load.\n\n## Using Kafdrop\n\n[Kafdrop](https://github.com/obsidiandynamics/kafdrop) is a web UI for viewing Kafka topics and browsing consumer groups. It is very helpful for development purpose. \n\nHere are scripts that can be useful to start a local Kafdrop webserver.\n\n```shell\nsource .env\nsed 's/KAFKA_USER/'$KAFKA_USER'/g' ./scripts/kafka.properties > ./scripts/output.properties\nsed -i '' 's/KAFKA_PASSWORD/'$KAFKA_PASSWORD'/g' ./scripts/output.properties\nsed -i '' 's/KAFKA_CERT_PWD/'$KAFKA_CERT_PWD'/g' ./scripts/output.properties\ndocker run -d --rm -p 9000:9000 \\\n    --name kafdrop \\\n    -v $(pwd)/certs:/home/certs \\\n    -e KAFKA_BROKERCONNECT=$KAFKA_BROKERS \\\n    -e KAFKA_PROPERTIES=$(cat ./scripts/output.properties | base64) \\\n    -e JVM_OPTS=\"-Xms32M -Xmx64M\" \\\n    -e SERVER_SERVLET_CONTEXTPATH=\"/\" \\\n    obsidiandynamics/kafdrop\n```\n\n[See also those scripts: startKafdrop](https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-eda-item-inventory/master/scripts/startKafdrop.sh)\n\nand [to stop kafdrop](https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-eda-item-inventory/master/scripts/stopKafdrop.sh)\n\n```shell\ndocker stop $(docker stop kafdrop)\n```\n\nThe Web console is at [http://localhost:9000/](http://localhost:9000/)\n\n## Running docker in kubernetes pod\n\nIf you need to run some of the lab within a shell session with docker, you can create a pod, using OpenShift console under one of your project:\n\n ![1](./images/create-pod.png)\n\nIn the yaml editor, copy [this yaml file](https://gist.githubusercontent.com/osowski/4c9b6eb8e63b93e97ad6fecd8d9c8ff4/raw/8c2720c572458838942ccdba87271c61d4764671/dind.yaml). This operation will download the docker image from dockerhub ibmcase account.\n\nYou can also download the yaml and do an `oc apply -f dind.yaml`.\n\nThen remote exec a shell within the pod: `oc exec -it dind bash`. You should be able to run another docker image in this pod, like for example our python environment.\n","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/use-cases/overview/pre-requisites.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}