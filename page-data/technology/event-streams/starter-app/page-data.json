{"componentChunkName":"component---src-pages-technology-event-streams-starter-app-mdx","path":"/technology/event-streams/starter-app/","result":{"pageContext":{"frontmatter":{"title":"Starter App","description":"Get the Starter Application up and running"},"relativePagePath":"/technology/event-streams/starter-app.mdx","titleType":"append","MdxNode":{"id":"ef81d42a-59c0-5913-85d3-a48f2dbe8bda","children":[],"parent":"32d56c96-7b83-595a-b576-c120c133cd73","internal":{"content":"---\ntitle: Starter App\ndescription: Get the Starter Application up and running\n---\nThis section details walking through the generation of a starter application for usage with IBM Event Streams, as documented in the [official product documentation](https://ibm.github.io/event-streams/getting-started/generating-starter-app/).\n\nThe Starter application is an excellent way to demonstrate sending and consuming messages. \n\n\n## Prepare the starter app configuration\n\n1. Log into the IBM Event Streams Dashboard, and from the home page, click the **Try the starter application** button from the _Getting Started_ page\n\n  ![Monitoring2](./images/monitoring2.png)\n\n1. Click **Download JAR from GitHub**. This will open a new window to <https://github.com/ibm-messaging/kafka-java-vertx-starter/releases>\n  \n  ![Monitoring3](./images/monitoring3.png)\n\n   - Click the link for `demo-all.jar` from the latest release available. At the time of this writing, the latest version was `1.0.0`.\n  \n   ![Monitoring4](./images/monitoring4.png)\n\n1. Return to the `Configure & run starter application` window and click **Generate properties**.\n\n  ![Monitoring5](./images/monitoring5.png)\n\n1. In dialog that pops up from the right-hand side of the screen, enter the following information:\n   - **Starter application name:** `starter-app-[your-initials]`\n   - Leave **New topic** selected and enter a **Topic name** of `starter-app-[your-initials]`.\n   - Click **Generate and download .zip**\n  \n   ![](./es-cp4i/images/es-starter-app.png)\n\n    The figure above illustrates that you can download a zip file containing the properties of the application according to the Event-Streams cluster configuration, and a `p12` TLS certificate to be added to a local folder.\n\n1. In a Terminal window, unzip the generated ZIP file from the previous window and move `demo-all.jar` file into the same folder.\n\n1. Review the extracted `kafka.properties` to understand how Event Streams has generated credentials and configuration information for this sample application to connect.\n\n## Run starter application\n\n1. This Starter application will run locally to the user's laptop with the command:\n\n    ```sh\n    java -jar target/demo-all.jar -Dproperties_path=./kafka.properties \n    ```\n1. As an alternate method, we have packaged this app in a docker image: `quay.io/ibmcase/es-demo`\n\n    ```sh\n    docker run -ti -p 8080:8080 -v  $(pwd)/kafka.properties:/deployments/kafka.properties -v  $(pwd)/truststore.p12:/deployments/truststore.p12  quay.io/ibmcase/es-demo\n    ```\n\n1.  Wait until you see the string `Application started in X ms` in the output and then visit the application's user interface via `http://localhost:8080`.\n\n  ![Monitoring7](./images/monitoring7.png)\n\n1. Once in the User Interface, enter a message to be contained for the Kafka record value then click **Start producing**.\n\n1. Wait a few moments until the UI updates to show some of the confirmed produced messages and offsets, then click on **Start consuming** on the right side of the application.\n\n  ![Monitoring8](./images/monitoring8.png)\n\n1. In the IBM Event Streams user interface, go to the topic where you send the messages to and make sure messages have actually made it.\n\n  ![Monitoring9](./images/monitoring9.png)\n\n1. You can leave the application running for the rest of the lab or you can do the following actions on the application\n   - If you would like to stop the application from producing, you can click **Stop producing**.\n   - If you would like to stop the application from consuming, you can click **Stop consuming**.\n   - If you would like to stop the application entirely, you can input `Control+C` in the Terminal session where the application is running.\n\nAn [alternative sample application](https://ibm.github.io/event-streams/getting-started/testing-loads/) can be leveraged from the official documentation to generate higher amounts of load.\n \n## Deploy to OpenShift\n\nThis application can also be deployed to OpenShift. Here are the steps:\n\n1. Use the same `kafka.properties` and `truststore.p12` files you have downloaded with the starter \napplication to create two kubernetes secrets holding these files in your OpenShift cluster\n\n    ```sh\n    oc create secret generic demo-app-secret --from-file=./kafka.properties\n    oc create secret generic truststore-cert --from-file=./truststore.p12\n    ```\n\n1. Clone the following GitHub repo that contains the Kubernetes artifacts that will run the starter application.\n\n    ```sh\n    git clone https://github.com/ibm-cloud-architecture/eda-quickstarts.git\n    ```\n\n1. Change directory to where those Kubernetes artefacts are.\n\n    ```sh\n    cd eda-quickstarts/kafka-java-vertz-starter\n    ```\n\n1. Deploy the Kubernetes artefacts.\n\n    ```sh\n    oc apply -k app-deployment\n    ```\n\n1. Get the route to the starter application running on your OpenShift cluster.\n\n    ```sh\n    oc get route es-demo -o=jsonpath='{.status.ingress[].host}'\n    ```\n\n1. Point your browser to that url to work with the IBM Event Streams Starter Application.\n\nThe source code for this application is in this git repo: [ibm-messaging/kafka-java-vertx-starter](https://github.com/ibm-messaging/kafka-java-vertx-starter/).\n\nEven though the application is running internally in OpenShift, it uses the external kafka listener as that is how the `kafka.properties` are provided by IBM Event Streams by default. In an attempt to not overcomplicate this task, it is used what IBM Event Streams provides out of the box.\n","type":"Mdx","contentDigest":"0aec1f4e8bfd931282491c3fa7194187","owner":"gatsby-plugin-mdx","counter":936},"frontmatter":{"title":"Starter App","description":"Get the Starter Application up and running"},"exports":{},"rawBody":"---\ntitle: Starter App\ndescription: Get the Starter Application up and running\n---\nThis section details walking through the generation of a starter application for usage with IBM Event Streams, as documented in the [official product documentation](https://ibm.github.io/event-streams/getting-started/generating-starter-app/).\n\nThe Starter application is an excellent way to demonstrate sending and consuming messages. \n\n\n## Prepare the starter app configuration\n\n1. Log into the IBM Event Streams Dashboard, and from the home page, click the **Try the starter application** button from the _Getting Started_ page\n\n  ![Monitoring2](./images/monitoring2.png)\n\n1. Click **Download JAR from GitHub**. This will open a new window to <https://github.com/ibm-messaging/kafka-java-vertx-starter/releases>\n  \n  ![Monitoring3](./images/monitoring3.png)\n\n   - Click the link for `demo-all.jar` from the latest release available. At the time of this writing, the latest version was `1.0.0`.\n  \n   ![Monitoring4](./images/monitoring4.png)\n\n1. Return to the `Configure & run starter application` window and click **Generate properties**.\n\n  ![Monitoring5](./images/monitoring5.png)\n\n1. In dialog that pops up from the right-hand side of the screen, enter the following information:\n   - **Starter application name:** `starter-app-[your-initials]`\n   - Leave **New topic** selected and enter a **Topic name** of `starter-app-[your-initials]`.\n   - Click **Generate and download .zip**\n  \n   ![](./es-cp4i/images/es-starter-app.png)\n\n    The figure above illustrates that you can download a zip file containing the properties of the application according to the Event-Streams cluster configuration, and a `p12` TLS certificate to be added to a local folder.\n\n1. In a Terminal window, unzip the generated ZIP file from the previous window and move `demo-all.jar` file into the same folder.\n\n1. Review the extracted `kafka.properties` to understand how Event Streams has generated credentials and configuration information for this sample application to connect.\n\n## Run starter application\n\n1. This Starter application will run locally to the user's laptop with the command:\n\n    ```sh\n    java -jar target/demo-all.jar -Dproperties_path=./kafka.properties \n    ```\n1. As an alternate method, we have packaged this app in a docker image: `quay.io/ibmcase/es-demo`\n\n    ```sh\n    docker run -ti -p 8080:8080 -v  $(pwd)/kafka.properties:/deployments/kafka.properties -v  $(pwd)/truststore.p12:/deployments/truststore.p12  quay.io/ibmcase/es-demo\n    ```\n\n1.  Wait until you see the string `Application started in X ms` in the output and then visit the application's user interface via `http://localhost:8080`.\n\n  ![Monitoring7](./images/monitoring7.png)\n\n1. Once in the User Interface, enter a message to be contained for the Kafka record value then click **Start producing**.\n\n1. Wait a few moments until the UI updates to show some of the confirmed produced messages and offsets, then click on **Start consuming** on the right side of the application.\n\n  ![Monitoring8](./images/monitoring8.png)\n\n1. In the IBM Event Streams user interface, go to the topic where you send the messages to and make sure messages have actually made it.\n\n  ![Monitoring9](./images/monitoring9.png)\n\n1. You can leave the application running for the rest of the lab or you can do the following actions on the application\n   - If you would like to stop the application from producing, you can click **Stop producing**.\n   - If you would like to stop the application from consuming, you can click **Stop consuming**.\n   - If you would like to stop the application entirely, you can input `Control+C` in the Terminal session where the application is running.\n\nAn [alternative sample application](https://ibm.github.io/event-streams/getting-started/testing-loads/) can be leveraged from the official documentation to generate higher amounts of load.\n \n## Deploy to OpenShift\n\nThis application can also be deployed to OpenShift. Here are the steps:\n\n1. Use the same `kafka.properties` and `truststore.p12` files you have downloaded with the starter \napplication to create two kubernetes secrets holding these files in your OpenShift cluster\n\n    ```sh\n    oc create secret generic demo-app-secret --from-file=./kafka.properties\n    oc create secret generic truststore-cert --from-file=./truststore.p12\n    ```\n\n1. Clone the following GitHub repo that contains the Kubernetes artifacts that will run the starter application.\n\n    ```sh\n    git clone https://github.com/ibm-cloud-architecture/eda-quickstarts.git\n    ```\n\n1. Change directory to where those Kubernetes artefacts are.\n\n    ```sh\n    cd eda-quickstarts/kafka-java-vertz-starter\n    ```\n\n1. Deploy the Kubernetes artefacts.\n\n    ```sh\n    oc apply -k app-deployment\n    ```\n\n1. Get the route to the starter application running on your OpenShift cluster.\n\n    ```sh\n    oc get route es-demo -o=jsonpath='{.status.ingress[].host}'\n    ```\n\n1. Point your browser to that url to work with the IBM Event Streams Starter Application.\n\nThe source code for this application is in this git repo: [ibm-messaging/kafka-java-vertx-starter](https://github.com/ibm-messaging/kafka-java-vertx-starter/).\n\nEven though the application is running internally in OpenShift, it uses the external kafka listener as that is how the `kafka.properties` are provided by IBM Event Streams by default. In an attempt to not overcomplicate this task, it is used what IBM Event Streams provides out of the box.\n","fileAbsolutePath":"/home/runner/work/refarch-eda/refarch-eda/docs/src/pages/technology/event-streams/starter-app.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}