{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./src/pages/concepts/flow-architectures.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","name","_frontmatter","InlineNotification","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","kind","parentName","isMDXComponent","module","exports"],"mappings":"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","file":"component---src-pages-concepts-flow-architectures-mdx-1f6f868d5199e18cd98a.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/refarch-eda/refarch-eda/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <strong>Added 1/21/2022</strong>\n    </InlineNotification>\n    <p>{`From the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.amazon.com/Flow-Architectures-Streaming-Event-Driven-Integration/dp/1492075892/ref=sr_1_1?keywords=flow+architectures&qid=1637675009&sr=8-1\"\n      }}>{`James Urquhart’s book: Flow architecture`}</a>{` and\npersonal studies.`}</p>\n    <p>{`As more and more of our businesses “go digital”, the groundwork is in place to fundamentally\nchange how real-time data is exchanged across organization boundaries. Data from different sources\ncan be combined to create a holistic view of a business situation.`}</p>\n    <p><strong parentName=\"p\">{`Flow`}</strong>{` is networked software integration that is event-driven, loosely coupled, and highly adaptable and extensible.`}</p>\n    <p>{`Value is created by interacting with the flow, and not just the data movement.`}</p>\n    <p>{`Since the beginning of IT as an industry, we are digitizing and automating the exchanges of value, and we spend\na lot of time and money to execute key transactions with less human intervention.\nHowever, most of the integrations we execute across organizational boundaries today are not\nin real time. Today, most, perhaps all—digital financial transactions in the world economy\nstill rely on batch processing at some point in the course of settlement.`}</p>\n    <p>{`There is no consistent and agreed-upon mechanism for exchanging signals for immediate action across companies or industries.`}</p>\n    <p>{`It is still extremely rare for a company to make real-time data available for\nunknown consumers to process at will.`}</p>\n    <p>{`This is why modern event-driven architecture (EDA) will enable profound changes in\nthe way companies integrate. EDAs are highly decoupled architectures, meaning there\nare very few mutual dependencies between the parties at both ends of the exchange.`}</p>\n    <h2>{`1- Flow characteristics`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Consumer applications requests data streams through self-service interfaces, and get the data continuously.`}</li>\n      <li parentName=\"ul\">{`Producers maintain control of relevant information to transmit and when to transmit.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Event`}</strong>{` packages information of data state changes, with timestamp and unique ID.\nThe context included with the transmitted data allows the consumer to better understand the nature of that data. `}<a parentName=\"li\" {...{\n          \"href\": \"https://cloudevents.io/\"\n        }}>{`CloudEvent`}</a>{` helps defining such context.`}</li>\n      <li parentName=\"ul\">{`The transmission of a series of events between two parties is called an `}<strong parentName=\"li\">{`event stream`}</strong>{`.`}</li>\n    </ul>\n    <p>{`The more streams there are from more sources, the more flow consumers will be drawn to\nthose streams and the more experimentation may be done. Over time, organizations will find\nnew ways to tie activities together to generate new value.`}</p>\n    <p><strong parentName=\"p\">{`Composable architectures`}</strong>{` allow the developer to assemble fine grained parts using\nconsistent mechanisms for both inputting data and consuming the output.\nIn `}<strong parentName=\"p\">{`contextual architectures`}</strong>{`, the environment provides specific contexts in\nwhich integration can happen. Developer must know a lot about the data that is available,\nthe mechanism by which the data will be passed, the rules for coding and deploying\nthe software.`}</p>\n    <p>{`EDA provides a much more composable and evolutionary approach for building event and data streams.`}</p>\n    <h2>{`2- Business motivations`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Do digital transformation to improve customer experiences. Customers expect their data to\nbe used in a way that is valuable to them, not just to the vendors. Sharing data between organizations\ncan lead to new business opportunities. This is one of the pilard of Society 5.0. `}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The Japan government defined `}<strong parentName=\"p\">{`Society 5.0`}</strong>{` as “A human-centered society that balances economic\nadvancement with the resolution of social problems by a system that highly integrates\ncyberspace and physical space”.`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\">{`Improve process automation, to drive efficiencies and profitability. The most limiting constraint in the\nprocess hides any improvements made to other steps. Finding constraints is where `}<a parentName=\"li\" {...{\n          \"href\": \"https://tkmg.com/books/value-stream-mapping/\"\n        }}>{`value stream mapping`}</a>{` shines:\nit uses lead time (queue time) and actual time to do the work. EDA will help to get time stamp and data\nfor steps in the process that are not completely in scope of a business process: may be cross business boundaries.`}</li>\n      <li parentName=\"ul\">{`Extract innovative value from data streams. Innovation as better solution for existing problem, or as new\nsolution to emerging problems.`}</li>\n    </ul>\n    <p>{`To improve process time, software needs accurate data at the time to process the work. As business evolve,\nhaving a rigid protocol to get the data, impacts process time. A business will need to experiment with new data sources\nwhen they are available and potentially relevant to their business.`}</p>\n    <p><strong parentName=\"p\">{`Stream processing improves interoperability (exchange data)`}</strong></p>\n    <p>{`Innovation is not adaptation. Companies must adapt constantly just to survive, like adding features on a product\nto pace with competition. Digital transformation aimed at avoiding competitive disruption is not innovation.`}</p>\n    <p>{`As the number of stream options grows, more and more business capabilities will be\ndefined in terms of stream processing. This will drive developers to find easier ways\nto discover, connect to, and process streams.`}</p>\n    <h3>{`Enabler for flow adoption`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Lowering the cost of stream processing`}</strong>{`: Integration costs dominate modern IT budgets.\nFor many integrations, the cost of creating interaction between systems is simply too high for what little value is gained.\nWith common interfaces and protocols that enable flows, the integration cost will be lower\nand people will find new uses for streaming that will boost the overall demand for streaming technologies. The `}<a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Jevons_paradox\"\n        }}>{`Jevons paradox`}</a>{` at work`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Increasing the flexibility in composing data flows`}</strong>{`: “pipe” data streams from one processing\nsystem to another through common interfaces and protocols.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Creating and utilizing a rich market ecosystem around key streams`}</strong>{`. The equities markets have all moved entirely to electronic forms of executing their marketplaces.\nHealth-care data streams for building services around patient data. Refrigerators streaming data to grocery\ndelivery services. `}</li>\n    </ul>\n    <p>{`Flow must be secure (producers maintain control over who can access their events),\nagile (change schema definitions),\ntimely (Data must arrive in a time frame that is appropriate for the context to which it is being applied),\nmanageable and retain a memory of its past. `}</p>\n    <p>{`Serverless, stream processing, machine learning, will create alternative to batch processing.`}</p>\n    <h2>{`3- Market`}</h2>\n    <p>{`SOA has brought challenges for adoption and scaling. Many applications have their own interfaces\nand even protocols to expose their functionality, so most integrations need protocol and\ndata model translations. `}</p>\n    <p>{`The adoption of queues and adaptors to do data and protocol translation was a scalable solution.\nExtending this central layer of adaptation was the Enterprise Service Bus, with intelligent\npipes / flows. `}</p>\n    <p>{`Message queues and ESBs are important to the development of streaming architectures but\nto support scalability and address complexity more decoupling is needed between\nproducers and consumers.`}</p>\n    <p>{`For IoT `}<a parentName=\"p\" {...{\n        \"href\": \"https://mqtt.org/\"\n      }}>{`MQTT`}</a>{` is the standard for messaging protocols in a lightweight pub/sub\ntransport protocol. MQTT supports 3 service levels: 0 - at most once, 1- at least once, 2 - exactly once.\nIt allows for messaging between device to cloud and cloud to device. It supports for persistent sessions\nreduces the time to reconnect the client with the broker.\nThe MQTT broker manages a list of topics, which enable it to identify groups of subscribers interested in a collection of messages.`}</p>\n    <p>{`For event processing three type of engines:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Functions`}</strong>{` (including low-code or no-code processors): WAS lambda, Knative eventing, Flink, Storm. Mendix and Vantiq have event-driven low code platform.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`log-based event streaming platforms`}</strong>{`: Apache Kafka, Apache Pulsar, AWS Kinesis, and Microsoft Azure Event Hubs. Topic becomes a system of record, as event sourcing pattern implementation.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`real-time stateful systems`}</strong>{`: `}<em parentName=\"li\">{`Digital twins`}</em>{` are software agents supporting the problem domain\nin a stateful manner. Behavior is supported by code or rules, and relationship between agents.\nAgents can monitor the overall system state. `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.swim.ai/\"\n        }}>{`Swim.ai`}</a>{` builds its model dynamically from the event stream and provides built-in machine learning capabilities that enable both continuous learning and high performance model execution`}</li>\n    </ul>\n    <p>{`Mainstream adoption of flow itself will be five to ten years from now (2020). Flow will have to prove that\nit meets security criteria for everything from electronic payments, to health-care data, to classified\ninformation. The CNCF’s `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloudevents.io/\"\n      }}>{`CloudEvents`}</a>{` specification, for instance, strongly suggests payloads be encrypted.\nThere is no single approach to defining an event with encryption explicitly supported\nthat can be read by any event-consuming application (MQTT, AMQP, have different encryption and TLS add more for\nTCP connection).`}</p>\n    <p>{`Consumers need assurances that the data they receive in an event is valid and accurate, a practice\nknown as `}<strong parentName=\"p\">{`data provenance`}</strong>{`.  `}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Data provenance is defined as “a record of the inputs, entities,\nsystems, and processes that influence data of interest, providing a historical record of the\ndata and its origins”`}</p>\n    </blockquote>\n    <p>{`Provenance has to maintained by the producer as a checksum number created by parsing the event data, and encrypted\nby the producer’s key. CloudEvent has metadata about the message. When sent to Kafka they are\nimmutable record. Now the traceability of the consumers in kafka world is a major challenge.\nBlockchain may also be used to track immutable record with network parties attest its accuracy.`}</p>\n    <p>{`Applying the concept of data loose value over time, it is important to act on data as early\nas possible, close to creation time. After a period of time data becomes less valuable.`}</p>\n    <p>{`Two time factors are important in this data processing: `}<strong parentName=\"p\">{`latency`}</strong>{` (time to deliver data to consumers)\nand `}<strong parentName=\"p\">{`retention`}</strong>{` (time to keep data). For latency try to reduce the number of network segment between\nproducer and consumers. Considering edge computing as a way to bring event processing close to the source.\nThe event processing add time to the end to end latency. Considering constraining the processing time frame.`}</p>\n    <p><em parentName=\"p\">{`Retention`}</em>{` is a problem linked to the business requirements, and we need to assess for each topic how long\nan event is still valuable for the consumers. Not keeping enough events will impact correctness of consumer state,\nprojection views… keeping for too long, increase the cost of storage, but also the time to rebuild data\nprojection. `}</p>\n    <p>{`Finally, producers will want to trust that only authorized consumers are using the events they produce.\nAlso it may be possible to imagine a way to control the intellectual property of the data so producer can keep\nits ownership. Data consumption should be done via payment like we do with music subscription.`}</p>\n    <h2>{`Flow patterns:`}</h2>\n    <h3>{`Collector pattern`}</h3>\n    <p>{`The Collector pattern is a pattern in which a single consumer subscribes to topics from multiple producers. `}</p>\n    <h3>{`Distributor pattern`}</h3>\n    <p>{`Each event in a stream is distributed to multiple consumers. It could be a hard problem to solve\nwhen doing it across geographically distributed systems. Edge computing can be used to distribute\nstreaming endpoints closer to the consumers that need those streams. Alternate\nis to moving the event processing close to the source. For many Distributor use cases,\npartitioning the data by region is probably smart, and flow interfaces will need to take\nthis into account.`}</p>\n    <h3>{`Signal pattern`}</h3>\n    <p>{`The Signal pattern is a general pattern that represents functions that exchange data between\nactors based on a distinct function or process, in can be seen as a traffic cop.\nIt supports multiple producers and multiple consumers. The signal pattern is supported\nby multiple event processing each handling one aspect of the event processing.`}</p>\n    <p>{`Stream processing may route event streams between several distributed edge computing services as\nwell as core shared services, but then we need management layer to get global view of the systems.\nThey need to be integrated into observability tool. But the “single pane of glass” is often a lure\nas distributed systems require distributed decision-making. More local solutions are more agile, flexible\nand better address local problems for improved resilience.  `}</p>\n    <p>{`One of the challenge of complex adaptive systems is that any agent participating in\nthe system has difficulty seeing how the system as a whole operates,\nbecause of its limited connections to other neighbor agents.`}</p>\n    <h3>{`Facilitator pattern`}</h3>\n    <p>{`A specialized form of Signal pattern, facilitator is a “broker” to match producers’ events to\nconsumers’ demands. It is like matching sellers with buyers.`}</p>\n    <h2>{`4- Identifying flow in your business`}</h2>\n    <p>{`The classical usee case categories:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Addressing and discovery`}</strong>{`: In modern complex systems environments, multiple systems need to be informed of the new entity, be able to utilize to assign\nwork to it. Addressing and discovery happens across organizational boundaries (for example in real-time inventory SKU is used to identify item for both supplier and retailers).\nTo seek such use cases, look at tracking problems like who or what is involved in a problem domain that is difficult to scale.\nWith event stream centric approach, A&D is done via a registry service used by new agents to indicate their existence, and the service publishes an event to a topic\nto broadcast the information about the new agent. A second option is to use a discovery service to watch`}<br parentName=\"p\"></br>{`\n`}{`specific event stream for certain transmissions that indicate the presence of an agent. `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.swim.ai/\"\n          }}>{`Swim.ai`}</a>{` continuously process and analyze\nstreaming data in concert with contextual data to inform business-critical, operational decisions. See also `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/swimos\"\n          }}>{`SwimOS`}</a>{` or Apache Flink.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Command and control`}</strong>{`: sources are connected to key decision-making and action-taking services to complete a business task. So they are everywhere in any business.\nA typical example of such use case, is the Supervisory Control And Data Acquisition, used in manufacturing, or energy production.\nTry to ask: `}<em parentName=\"p\">{`where does the organization depend on timely responses to changes in state?`}</em>{`\nC&C can be supported by centralized control with events come from multiple sources to stateless or stateful services, to apply\nreal-time analysis and decision-making algorithms to those streams. Output events are published to sinks for future processing.\nScaling with a centralized control approach is not straightforward, as getting the right events to the right processing instances can be a challenge.\nAlso when we need the compute global aggregates by looking at the state of various agents in the systems is more complex,\nas it needs to integrate with stateful stream processing. Actions can be triggered by state changes, triggers that fire at specific times, or even API requests from other applications or services.`}</p>\n      </li>\n    </ul>\n    <p>{`An alternate is to use distributed control, like applying the decision-making logic at the edge. `}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Query and observability:`}</strong>{` querying or monitoring individual agents or specific groups of agents. The problem is\nto locate the right agent target of the query, and get current state or history from that agent. `}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Telemetry and analytics:`}</strong>{` focuses on understanding systems behavior, and get real-time big data insights (e.g. Click streams).\nNeed to assess which insights require understanding the emerging behavior of a system of agents emitting vast amounts of data.`}</li>\n    </ul>\n    <p>{`Interesting presentations:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=qCNXUUlhJJE\"\n        }}>{`Voxxed Athens 2018 - Eventing, Serverless, and the Extensible Enterprise by Clemens Vasters`}</a></li>\n    </ul>\n    <h2>{`5- Model Flow`}</h2>\n    <p>{`Use Event storming to build a timeline of events that are required to complete a complex task, and to get\nand understanding of the people, systems, commands and policies that affect the event flow.\nThe Event Storming process is a highly interactive endeavor that :brings subject matter experts\ntogether to identify the flow of events in a process or system`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Identify the business activities that you would like to model in terms of event flow`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Begin by asking the group to identify the events that are interesting and/or required for that business activity`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Place events along a timeline from earliest action to latest action`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Capture:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The real-world influences on the flow, such as the human users or external systems that produce or consume events`}</li>\n          <li parentName=\"ul\">{`What commands may initiate an event`}</li>\n          <li parentName=\"ul\">{`What policies are activated when an event takes place. A policy usually initiates a new command. Events always result in a policy action unless the event is generating output.`}</li>\n          <li parentName=\"ul\">{`What are the outputs from the event flow.`}</li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`When designing the solution assess:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`When the event is simply to broadcast facts for consumption by interested parties. The producer contract is\nsimply to promise to send events as soon as they are available.`}</li>\n      <li parentName=\"ul\">{`If consumers can come and go, and experiment with the consumption of a stream with little risk of consequences if they choose not to continue`}</li>\n      <li parentName=\"ul\">{`When event is part of an interaction around an intent, requiring a conversation with the consumer`}</li>\n      <li parentName=\"ul\">{`Is the event a stand-alone communication, discrete, or is it only useful in a context that includes a series of events.\nSeries applications are where log-based queueing shines`}</li>\n      <li parentName=\"ul\">{`Is the processing involve one simple action per event, or is there a group of related actions, a workflow, required to complete processing`}</li>\n    </ul>\n    <p>{`When building a flow-ready application for messaging, the “trunk-limb-branch-leaf” pattern is a\ncritical tool to consider: use edge computing to distribute decision-making close to the related\ngroups of agents, computing local aggregates, and propagate to larger more central flows. Using messaging\nmiddleware to manage interaction between agents, to isolate message distribution to just the needed\nservers and agents, and propagate aggregates to the trunk, greatly reducing traffic between the original agents and the core.`}</p>\n    <p>{`Another consideration is to assess if the consumers need to filter events from a unique topic before\ndoing its own processing, in this case the event payload may include metadata and URL to get the payload.\nIf the metadata indicates an action is required, the consumer can then call the data retrieval URL.`}</p>\n    <p>{`Whether or not you include payload data depends a bit on the volume of events being published and the security and latency requirements of your application.`}</p>\n    <p>{`Log-based queues can play the role of “system of record” for both event values and sequence, especially for systems that need both the most recent event and an understanding of the recent history of events received`}</p>\n    <p>{`For single action processing, serverless, knative eventing are technologies to consider. Solution\nneeds to route events to the appropriate processor. But if your event processing needs require\nmaintaining accurate state for the elements sending events then stateful streaming platform are better fit.`}</p>\n    <p>{`For workflow, modern solutions, simplify creating and managing process definitions independent of the actions taken in that process.\nIt supports for stepping an event through multiple interdependent actions. Workflow may require to\nwait for another related event occurs or a human completes his action.`}</p>\n    <h2>{`6- Today landscape`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Standards`}</strong>{` are important for flow:  TLS, WebSockets, and HTTP from IETF, MQTT and AMQP from OASIS,\n`}<em parentName=\"p\">{`CloudEvents`}</em>{` and the Serverless Working Group from CNCF`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Open sources projects`}</strong>{`: `}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Apache Kafka and Apache Pulse for log-based queueing`}</li>\n          <li parentName=\"ul\">{`Apache Beam, Flink, Heron, Nifi, Samza, and Storm for stream processing`}</li>\n          <li parentName=\"ul\">{`Apache Druid as a “stream-native” database`}</li>\n          <li parentName=\"ul\">{`gRPC may play a key role in any future flow interface`}</li>\n          <li parentName=\"ul\">{`NATS.io, a cloud-native messaging platform`}</li>\n          <li parentName=\"ul\">{`Argo, a Kubernetes-based workflow manager that theoretically could act as the core of an event-driven process automation bus`}</li>\n        </ul>\n      </li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Opportunities:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Data provenance and security for payloads passed between disparate parties`}</li>\n          <li parentName=\"ul\">{`Tracking event data distribution across the world wide flow. Where does the data generated by an event end up being consumed or processed?`}</li>\n          <li parentName=\"ul\">{`Platforms for coordinating event processing, aggregation, and synchronization between core data center event processors, edge computing environments, and end-user or IoT devices`}</li>\n          <li parentName=\"ul\">{`Monetization mechanisms for all types of event and messaging streams`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`The adoption of a technology is not the delivery that makes it valuable, but the ecosystem that consumes it.`}</p>\n    <p>{`Look at existing streams and determine how to add value for the consumers of that stream.\nCan you automate valuable insights and analytics in real time for customers with shared needs?\nWould it be possible to recast the stream in another format for an industry that is currently\nusing a different standard to consume that form of data? `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};"],"sourceRoot":""}